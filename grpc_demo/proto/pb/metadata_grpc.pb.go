// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: metadata.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PassParam_SendParam_FullMethodName = "/proto.PassParam/SendParam"
)

// PassParamClient is the client API for PassParam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassParamClient interface {
	SendParam(ctx context.Context, in *PassParamRequest, opts ...grpc.CallOption) (*PassParamResponse, error)
}

type passParamClient struct {
	cc grpc.ClientConnInterface
}

func NewPassParamClient(cc grpc.ClientConnInterface) PassParamClient {
	return &passParamClient{cc}
}

func (c *passParamClient) SendParam(ctx context.Context, in *PassParamRequest, opts ...grpc.CallOption) (*PassParamResponse, error) {
	out := new(PassParamResponse)
	err := c.cc.Invoke(ctx, PassParam_SendParam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassParamServer is the server API for PassParam service.
// All implementations must embed UnimplementedPassParamServer
// for forward compatibility
type PassParamServer interface {
	SendParam(context.Context, *PassParamRequest) (*PassParamResponse, error)
	mustEmbedUnimplementedPassParamServer()
}

// UnimplementedPassParamServer must be embedded to have forward compatible implementations.
type UnimplementedPassParamServer struct {
}

func (UnimplementedPassParamServer) SendParam(context.Context, *PassParamRequest) (*PassParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendParam not implemented")
}
func (UnimplementedPassParamServer) mustEmbedUnimplementedPassParamServer() {}

// UnsafePassParamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassParamServer will
// result in compilation errors.
type UnsafePassParamServer interface {
	mustEmbedUnimplementedPassParamServer()
}

func RegisterPassParamServer(s grpc.ServiceRegistrar, srv PassParamServer) {
	s.RegisterService(&PassParam_ServiceDesc, srv)
}

func _PassParam_SendParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassParamServer).SendParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassParam_SendParam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassParamServer).SendParam(ctx, req.(*PassParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassParam_ServiceDesc is the grpc.ServiceDesc for PassParam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassParam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PassParam",
	HandlerType: (*PassParamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendParam",
			Handler:    _PassParam_SendParam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata.proto",
}
