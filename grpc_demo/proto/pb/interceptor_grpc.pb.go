// protoc --go_out=. --go-grpc_out=.  interceptor.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: interceptor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InterceptorService_Interceptor_FullMethodName = "/proto.InterceptorService/Interceptor"
)

// InterceptorServiceClient is the client API for InterceptorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterceptorServiceClient interface {
	Interceptor(ctx context.Context, in *InterceptorRequest, opts ...grpc.CallOption) (*InterceptorResponse, error)
}

type interceptorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterceptorServiceClient(cc grpc.ClientConnInterface) InterceptorServiceClient {
	return &interceptorServiceClient{cc}
}

func (c *interceptorServiceClient) Interceptor(ctx context.Context, in *InterceptorRequest, opts ...grpc.CallOption) (*InterceptorResponse, error) {
	out := new(InterceptorResponse)
	err := c.cc.Invoke(ctx, InterceptorService_Interceptor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterceptorServiceServer is the server API for InterceptorService service.
// All implementations must embed UnimplementedInterceptorServiceServer
// for forward compatibility
type InterceptorServiceServer interface {
	Interceptor(context.Context, *InterceptorRequest) (*InterceptorResponse, error)
	mustEmbedUnimplementedInterceptorServiceServer()
}

// UnimplementedInterceptorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterceptorServiceServer struct {
}

func (UnimplementedInterceptorServiceServer) Interceptor(context.Context, *InterceptorRequest) (*InterceptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Interceptor not implemented")
}
func (UnimplementedInterceptorServiceServer) mustEmbedUnimplementedInterceptorServiceServer() {}

// UnsafeInterceptorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterceptorServiceServer will
// result in compilation errors.
type UnsafeInterceptorServiceServer interface {
	mustEmbedUnimplementedInterceptorServiceServer()
}

func RegisterInterceptorServiceServer(s grpc.ServiceRegistrar, srv InterceptorServiceServer) {
	s.RegisterService(&InterceptorService_ServiceDesc, srv)
}

func _InterceptorService_Interceptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterceptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterceptorServiceServer).Interceptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterceptorService_Interceptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterceptorServiceServer).Interceptor(ctx, req.(*InterceptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterceptorService_ServiceDesc is the grpc.ServiceDesc for InterceptorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterceptorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InterceptorService",
	HandlerType: (*InterceptorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Interceptor",
			Handler:    _InterceptorService_Interceptor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interceptor.proto",
}
