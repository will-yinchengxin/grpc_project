// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: stream.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamChat_Chat_FullMethodName = "/proto.StreamChat/Chat"
)

// StreamChatClient is the client API for StreamChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamChatClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (StreamChat_ChatClient, error)
}

type streamChatClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamChatClient(cc grpc.ClientConnInterface) StreamChatClient {
	return &streamChatClient{cc}
}

func (c *streamChatClient) Chat(ctx context.Context, opts ...grpc.CallOption) (StreamChat_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamChat_ServiceDesc.Streams[0], StreamChat_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamChatChatClient{stream}
	return x, nil
}

type StreamChat_ChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type streamChatChatClient struct {
	grpc.ClientStream
}

func (x *streamChatChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamChatChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamChatServer is the server API for StreamChat service.
// All implementations must embed UnimplementedStreamChatServer
// for forward compatibility
type StreamChatServer interface {
	Chat(StreamChat_ChatServer) error
	mustEmbedUnimplementedStreamChatServer()
}

// UnimplementedStreamChatServer must be embedded to have forward compatible implementations.
type UnimplementedStreamChatServer struct {
}

func (UnimplementedStreamChatServer) Chat(StreamChat_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedStreamChatServer) mustEmbedUnimplementedStreamChatServer() {}

// UnsafeStreamChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamChatServer will
// result in compilation errors.
type UnsafeStreamChatServer interface {
	mustEmbedUnimplementedStreamChatServer()
}

func RegisterStreamChatServer(s grpc.ServiceRegistrar, srv StreamChatServer) {
	s.RegisterService(&StreamChat_ServiceDesc, srv)
}

func _StreamChat_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamChatServer).Chat(&streamChatChatServer{stream})
}

type StreamChat_ChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type streamChatChatServer struct {
	grpc.ServerStream
}

func (x *streamChatChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamChatChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamChat_ServiceDesc is the grpc.ServiceDesc for StreamChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StreamChat",
	HandlerType: (*StreamChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _StreamChat_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
