// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_AdvertiseList_FullMethodName   = "/pb.ProductService/AdvertiseList"
	ProductService_CreateAdvertise_FullMethodName = "/pb.ProductService/CreateAdvertise"
	ProductService_DeleteAdvertise_FullMethodName = "/pb.ProductService/DeleteAdvertise"
	ProductService_UpdateAdvertise_FullMethodName = "/pb.ProductService/UpdateAdvertise"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// 这里只完成广告业务, 频道, 商品, 分类 后续再补充
	AdvertiseList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdvertisesRes, error)
	CreateAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*AdvertiseItemRes, error)
	DeleteAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) AdvertiseList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdvertisesRes, error) {
	out := new(AdvertisesRes)
	err := c.cc.Invoke(ctx, ProductService_AdvertiseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*AdvertiseItemRes, error) {
	out := new(AdvertiseItemRes)
	err := c.cc.Invoke(ctx, ProductService_CreateAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_UpdateAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	// 这里只完成广告业务, 频道, 商品, 分类 后续再补充
	AdvertiseList(context.Context, *emptypb.Empty) (*AdvertisesRes, error)
	CreateAdvertise(context.Context, *AdvertiseReq) (*AdvertiseItemRes, error)
	DeleteAdvertise(context.Context, *AdvertiseReq) (*emptypb.Empty, error)
	UpdateAdvertise(context.Context, *AdvertiseReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) AdvertiseList(context.Context, *emptypb.Empty) (*AdvertisesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvertiseList not implemented")
}
func (UnimplementedProductServiceServer) CreateAdvertise(context.Context, *AdvertiseReq) (*AdvertiseItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdvertise not implemented")
}
func (UnimplementedProductServiceServer) DeleteAdvertise(context.Context, *AdvertiseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdvertise not implemented")
}
func (UnimplementedProductServiceServer) UpdateAdvertise(context.Context, *AdvertiseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdvertise not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_AdvertiseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AdvertiseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AdvertiseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AdvertiseList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateAdvertise(ctx, req.(*AdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAdvertise(ctx, req.(*AdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAdvertise(ctx, req.(*AdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdvertiseList",
			Handler:    _ProductService_AdvertiseList_Handler,
		},
		{
			MethodName: "CreateAdvertise",
			Handler:    _ProductService_CreateAdvertise_Handler,
		},
		{
			MethodName: "DeleteAdvertise",
			Handler:    _ProductService_DeleteAdvertise_Handler,
		},
		{
			MethodName: "UpdateAdvertise",
			Handler:    _ProductService_UpdateAdvertise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
